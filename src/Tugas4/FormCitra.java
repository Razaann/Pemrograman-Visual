/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Tugas4;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.awt.Image;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author User
 */
public class FormCitra extends javax.swing.JFrame {

    
    File myFileOriginal;
    File myFileProcessed;
    BufferedImage img;
    /**
     * Creates new form FormCitra
     */
    public FormCitra() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        LabelThresholding = new javax.swing.JLabel();
        LabelNormal = new javax.swing.JLabel();
        LabelNegative = new javax.swing.JLabel();
        LabelBlur = new javax.swing.JLabel();
        LabelGrayscale = new javax.swing.JLabel();
        LabelEdge = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MenuItemOpenFile = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        MenuItemGrayscale = new javax.swing.JMenuItem();
        MenuItemThresholding = new javax.swing.JMenuItem();
        MenuItemNegative = new javax.swing.JMenuItem();
        MenuItemEdgeDetection = new javax.swing.JMenuItem();
        MenuItemBlur = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LabelThresholding.setPreferredSize(new java.awt.Dimension(200, 200));

        LabelNormal.setPreferredSize(new java.awt.Dimension(200, 200));

        LabelNegative.setPreferredSize(new java.awt.Dimension(200, 200));

        LabelBlur.setPreferredSize(new java.awt.Dimension(200, 200));

        LabelGrayscale.setPreferredSize(new java.awt.Dimension(200, 200));

        LabelEdge.setPreferredSize(new java.awt.Dimension(200, 200));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(LabelNormal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(LabelGrayscale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(LabelThresholding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(LabelNegative, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(LabelEdge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(LabelBlur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelNormal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelThresholding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelGrayscale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelBlur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelNegative, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelEdge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jMenu1.setText("File");

        MenuItemOpenFile.setText("Open File");
        MenuItemOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemOpenFileActionPerformed(evt);
            }
        });
        jMenu1.add(MenuItemOpenFile);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Filter");

        MenuItemGrayscale.setText("GrayScale");
        MenuItemGrayscale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemGrayscaleActionPerformed(evt);
            }
        });
        jMenu2.add(MenuItemGrayscale);

        MenuItemThresholding.setText("Thresholding");
        MenuItemThresholding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemThresholdingActionPerformed(evt);
            }
        });
        jMenu2.add(MenuItemThresholding);

        MenuItemNegative.setText("Negative");
        MenuItemNegative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemNegativeActionPerformed(evt);
            }
        });
        jMenu2.add(MenuItemNegative);

        MenuItemEdgeDetection.setText("Edge Detection");
        MenuItemEdgeDetection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemEdgeDetectionActionPerformed(evt);
            }
        });
        jMenu2.add(MenuItemEdgeDetection);

        MenuItemBlur.setText("Blur Image");
        MenuItemBlur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemBlurActionPerformed(evt);
            }
        });
        jMenu2.add(MenuItemBlur);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuItemOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemOpenFileActionPerformed
        // TODO add your handling code here:
        JFileChooser loadFile = new JFileChooser();
        
        loadFile.setFileFilter(
        new FileNameExtensionFilter(
                "Image File (*.jpg;*.png;*.bmp)","jpg","jpeg","png","bmp"));
        
        //loadFile.showOpenDialog(jMenu1);
        if(loadFile.showOpenDialog(jMenu1) 
                == JFileChooser.APPROVE_OPTION)
        {
            String path = loadFile.getSelectedFile().getPath();
            //JOptionPane.showMessageDialog(rootPane, path);
            myFileOriginal = loadFile.getSelectedFile();
            
            ImageIcon myImg = new ImageIcon(path);
            
            ImageIcon myImgScaled = 
                new ImageIcon(
                myImg.getImage()
                .getScaledInstance(
                        200, 200, Image.SCALE_DEFAULT));
            
            LabelNormal.setIcon(myImgScaled); 
        } 
        
    }//GEN-LAST:event_MenuItemOpenFileActionPerformed

    private void MenuItemGrayscaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemGrayscaleActionPerformed
        // TODO add your handling code here:
        JFileChooser loadFile = new JFileChooser();

        loadFile.setFileFilter(
            new FileNameExtensionFilter(
                "Image File (*.jpg;*.png;*.bmp)", "jpg", "jpeg", "png", "bmp"));

        if(loadFile.showOpenDialog(jMenu1) == JFileChooser.APPROVE_OPTION) {
            String path = loadFile.getSelectedFile().getPath();
            myFileOriginal = loadFile.getSelectedFile();

            try {
                // Baca gambar asli
                BufferedImage bufferedImg = ImageIO.read(myFileOriginal);

                // Ubah ke grayscale
                for (int x = 0; x < bufferedImg.getWidth(); x++) {
                    for (int y = 0; y < bufferedImg.getHeight(); y++) {
                        int rgb = bufferedImg.getRGB(x, y);

                        int R = (rgb >> 16) & 0xFF;
                        int G = (rgb >> 8) & 0xFF;
                        int B = rgb & 0xFF;

                        int grayLevel = (R + G + B) / 3;
                        int gray = (grayLevel << 16) | (grayLevel << 8) | grayLevel;

                        bufferedImg.setRGB(x, y, gray);
                    }
                }

                // Masukkan hasil grayscale ke LabelNormal
                ImageIcon myImgScaled = new ImageIcon(
                    bufferedImg.getScaledInstance(200, 200, Image.SCALE_DEFAULT));
                LabelGrayscale.setIcon(myImgScaled);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Gagal memproses gambar: " + e.getMessage());
            }
        }
        
    }//GEN-LAST:event_MenuItemGrayscaleActionPerformed

    private void MenuItemThresholdingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemThresholdingActionPerformed
        // TODO add your handling code here:
        JFileChooser loadFile = new JFileChooser();

        loadFile.setFileFilter(
            new FileNameExtensionFilter(
                "Image File (*.jpg;*.png;*.bmp)", "jpg", "jpeg", "png", "bmp"));

        if(loadFile.showOpenDialog(jMenu1) == JFileChooser.APPROVE_OPTION) {
            String path = loadFile.getSelectedFile().getPath();
            myFileOriginal = loadFile.getSelectedFile();

            try {
                // Baca gambar asli
                BufferedImage bufferedImg = ImageIO.read(myFileOriginal);

                // Threshold value
                int threshold = 128;

                // Ubah ke black & white
                for (int x = 0; x < bufferedImg.getWidth(); x++) {
                    for (int y = 0; y < bufferedImg.getHeight(); y++) {
                        int rgb = bufferedImg.getRGB(x, y);

                        int R = (rgb >> 16) & 0xFF;
                        int G = (rgb >> 8) & 0xFF;
                        int B = rgb & 0xFF;

                        int grayLevel = (R + G + B) / 3;

                        int bw = (grayLevel >= threshold) ? 0xFFFFFF : 0x000000;

                        bufferedImg.setRGB(x, y, bw);
                    }
                }

                // Masukkan hasil threshold ke LabelNormal
                ImageIcon myImgScaled = new ImageIcon(
                    bufferedImg.getScaledInstance(200, 200, Image.SCALE_DEFAULT));
                LabelThresholding.setIcon(myImgScaled);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Gagal memproses gambar: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_MenuItemThresholdingActionPerformed

    private void MenuItemNegativeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemNegativeActionPerformed
        // TODO add your handling code here:
        JFileChooser loadFile = new JFileChooser();

        loadFile.setFileFilter(
            new FileNameExtensionFilter(
                "Image File (*.jpg;*.png;*.bmp)", "jpg", "jpeg", "png", "bmp"));

        if(loadFile.showOpenDialog(jMenu1) == JFileChooser.APPROVE_OPTION) {
            String path = loadFile.getSelectedFile().getPath();
            myFileOriginal = loadFile.getSelectedFile();

            try {
                // Baca gambar asli
                BufferedImage bufferedImg = ImageIO.read(myFileOriginal);

                // Proses Negative
                for (int x = 0; x < bufferedImg.getWidth(); x++) {
                    for (int y = 0; y < bufferedImg.getHeight(); y++) {
                        int rgb = bufferedImg.getRGB(x, y);

                        int R = (rgb >> 16) & 0xFF;
                        int G = (rgb >> 8) & 0xFF;
                        int B = rgb & 0xFF;

                        int Rn = 255 - R;
                        int Gn = 255 - G;
                        int Bn = 255 - B;

                        int newRGB = (Rn << 16) | (Gn << 8) | Bn;

                        bufferedImg.setRGB(x, y, newRGB);
                    }
                }

                // Tampilkan hasil
                ImageIcon myImgScaled = new ImageIcon(
                    bufferedImg.getScaledInstance(200, 200, Image.SCALE_DEFAULT));
                LabelNegative.setIcon(myImgScaled);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Gagal memproses gambar: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_MenuItemNegativeActionPerformed

    private void MenuItemEdgeDetectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemEdgeDetectionActionPerformed
        // TODO add your handling code here:
        JFileChooser loadFile = new JFileChooser();

        loadFile.setFileFilter(
            new FileNameExtensionFilter(
                "Image File (*.jpg;*.png;*.bmp)", "jpg", "jpeg", "png", "bmp"));

        if(loadFile.showOpenDialog(jMenu1) == JFileChooser.APPROVE_OPTION) {
            String path = loadFile.getSelectedFile().getPath();
            myFileOriginal = loadFile.getSelectedFile();

            try {
                BufferedImage bufferedImg = ImageIO.read(myFileOriginal);

                int width = bufferedImg.getWidth();
                int height = bufferedImg.getHeight();

                BufferedImage edgeImg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

                // Sobel kernels
                int[][] Gx = {
                    {-1, 0, 1},
                    {-2, 0, 2},
                    {-1, 0, 1}
                };

                int[][] Gy = {
                    {-1, -2, -1},
                    { 0,  0,  0},
                    { 1,  2,  1}
                };

                for (int x = 1; x < width - 1; x++) {
                    for (int y = 1; y < height - 1; y++) {
                        int sumX = 0;
                        int sumY = 0;

                        // convolution
                        for (int i = -1; i <= 1; i++) {
                            for (int j = -1; j <= 1; j++) {
                                int rgb = bufferedImg.getRGB(x + i, y + j);

                                int R = (rgb >> 16) & 0xFF;
                                int G = (rgb >> 8) & 0xFF;
                                int B = rgb & 0xFF;

                                int gray = (R + G + B) / 3;

                                sumX += gray * Gx[i + 1][j + 1];
                                sumY += gray * Gy[i + 1][j + 1];
                            }
                        }

                        int magnitude = (int)Math.min(255, Math.sqrt(sumX * sumX + sumY * sumY));

                        int newRGB = (magnitude << 16) | (magnitude << 8) | magnitude;
                        edgeImg.setRGB(x, y, newRGB);
                    }
                }

                // Tampilkan hasil ke LabelNormal
                ImageIcon myImgScaled = new ImageIcon(
                    edgeImg.getScaledInstance(200, 200, Image.SCALE_DEFAULT));
                LabelEdge.setIcon(myImgScaled);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Gagal memproses gambar: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_MenuItemEdgeDetectionActionPerformed

    private void MenuItemBlurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemBlurActionPerformed
        // TODO add your handling code here:
        JFileChooser loadFile = new JFileChooser();

        loadFile.setFileFilter(
            new FileNameExtensionFilter(
                "Image File (*.jpg;*.png;*.bmp)", "jpg", "jpeg", "png", "bmp"));

        if(loadFile.showOpenDialog(jMenu1) == JFileChooser.APPROVE_OPTION) {
            String path = loadFile.getSelectedFile().getPath();
            myFileOriginal = loadFile.getSelectedFile();

            try {
                BufferedImage bufferedImg = ImageIO.read(myFileOriginal);

                int width = bufferedImg.getWidth();
                int height = bufferedImg.getHeight();

                BufferedImage gaussianImg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

                int[][] kernel = {
                    {1, 2, 1},
                    {2, 4, 2},
                    {1, 2, 1}
                };
                int kernelSum = 16;

                for (int x = 1; x < width - 1; x++) {
                    for (int y = 1; y < height - 1; y++) {
                        int sumR = 0, sumG = 0, sumB = 0;

                        for (int i = -1; i <= 1; i++) {
                            for (int j = -1; j <= 1; j++) {
                                int rgb = bufferedImg.getRGB(x + i, y + j);

                                int R = (rgb >> 16) & 0xFF;
                                int G = (rgb >> 8) & 0xFF;
                                int B = rgb & 0xFF;

                                int weight = kernel[i + 1][j + 1];

                                sumR += R * weight;
                                sumG += G * weight;
                                sumB += B * weight;
                            }
                        }

                        int newR = sumR / kernelSum;
                        int newG = sumG / kernelSum;
                        int newB = sumB / kernelSum;

                        int newRGB = (newR << 16) | (newG << 8) | newB;
                        gaussianImg.setRGB(x, y, newRGB);
                    }
                }

                // Tampilkan hasil Gaussian blur
                ImageIcon myImgScaled = new ImageIcon(
                    gaussianImg.getScaledInstance(200, 200, Image.SCALE_DEFAULT));
                LabelBlur.setIcon(myImgScaled);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Gagal memproses gambar: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_MenuItemBlurActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormCitra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormCitra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormCitra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormCitra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormCitra().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabelBlur;
    private javax.swing.JLabel LabelEdge;
    private javax.swing.JLabel LabelGrayscale;
    private javax.swing.JLabel LabelNegative;
    private javax.swing.JLabel LabelNormal;
    private javax.swing.JLabel LabelThresholding;
    private javax.swing.JMenuItem MenuItemBlur;
    private javax.swing.JMenuItem MenuItemEdgeDetection;
    private javax.swing.JMenuItem MenuItemGrayscale;
    private javax.swing.JMenuItem MenuItemNegative;
    private javax.swing.JMenuItem MenuItemOpenFile;
    private javax.swing.JMenuItem MenuItemThresholding;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}

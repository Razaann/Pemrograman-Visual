
import java.awt.Image;
import java.awt.image.BufferedImage;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author LENOVO
 */
public class FormImage extends javax.swing.JFrame {

    /**
     * Creates new form FormImage
     */
    
    File myFileOriginal;
    File myFileProcessed;
    BufferedImage img;
    
    public FormImage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setVerifyInputWhenFocusTarget(false);

        jTextField1.setText("128");

        jLabel3.setText("Treshold Black N White");

        jMenu3.setText("File");

        jMenuItem1.setText("Open Image");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Save Image");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");

        jMenuItem3.setText("Grayscale");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        jMenuItem4.setText("Black White");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem4);

        jMenuItem5.setText("Negatif");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem5);

        jMenuBar2.add(jMenu4);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(79, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        JFileChooser loadFile = new JFileChooser();
        
        loadFile.setFileFilter(
        new FileNameExtensionFilter(
                "Image File (*.jpg;*.png;*.bmp)","jpg","jpeg","png","bmp"));
        
        //loadFile.showOpenDialog(jMenu1);
        if(loadFile.showOpenDialog(jMenu1) 
                == JFileChooser.APPROVE_OPTION)
        {
            String path = loadFile.getSelectedFile().getPath();
            //JOptionPane.showMessageDialog(rootPane, path);
            myFileOriginal = loadFile.getSelectedFile();
            
            ImageIcon myImg = new ImageIcon(path);
            
            ImageIcon myImgScaled = 
                new ImageIcon(
                myImg.getImage()
                .getScaledInstance(
                        250, 250, Image.SCALE_DEFAULT));
            
            jLabel1.setIcon(myImgScaled); 
        } 
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        
        myFileProcessed = new File("temp.jpg");
        
        try{
            img = ImageIO.read(myFileOriginal);
            
            for(int i=0;i<img.getWidth();i++)
            {
                for(int j=0;j<img.getHeight();j++)
                {
                    int rgb = img.getRGB(i, j);
                    
                    int R = (rgb >> 16) & 0xFF;
                    //JOptionPane.showMessageDialog(null, R);
                    int G = (rgb >> 8) & 0xFF;
                    //JOptionPane.showMessageDialog(null, G);
                    int B = rgb & 0xFF;
                    //JOptionPane.showMessageDialog(null, B);
                    
                    int grayLevel = (R+G+B)/3;
                    
                    int gray = (grayLevel << 16) + (grayLevel << 8) + grayLevel;
                    
                    img.setRGB(i, j, gray);
                }
            }
            ImageIO.write(img, "jpg", myFileProcessed);
        }
        catch(IOException ex)
        {
            
        }
        
        ImageIcon myImg = new ImageIcon(myFileProcessed.getPath());
            ImageIcon myImgScaled = 
                new ImageIcon(
                myImg.getImage()
                .getScaledInstance(
                        250, 250, Image.SCALE_DEFAULT));
            jLabel2.setIcon(myImgScaled);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        
        JFileChooser saveFile = new JFileChooser();   
        saveFile.setFileFilter(
        new FileNameExtensionFilter(
                "Image File (*.jpg;*.png;*.bmp)","jpg","jpeg","png","bmp"));
        
        if(saveFile.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
        {    
            try{
                ImageIO.write(img, "jpg", new File(saveFile.getSelectedFile().getPath()));
            }
            catch(IOException ex)
            {
                
            }
               
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        
        myFileProcessed = new File("temp.jpg");
        
        try{
            img = ImageIO.read(myFileOriginal);
            
            for(int i=0;i<img.getWidth();i++)
            {
                for(int j=0;j<img.getHeight();j++)
                {
                    int rgb = img.getRGB(i, j);
                    
                    int R = (rgb >> 16) & 0xFF;
                    //JOptionPane.showMessageDialog(null, R);
                    int G = (rgb >> 8) & 0xFF;
                    //JOptionPane.showMessageDialog(null, G);
                    int B = rgb & 0xFF;
                    //JOptionPane.showMessageDialog(null, B);
                    
                    int grayLevel = (R+G+B)/3;
                    
                    int treshold = Integer.parseInt(jTextField1.getText());
                    
                    if(grayLevel>=treshold)   grayLevel = 255;
                    else                 grayLevel = 0;
                    
                    int gray = (grayLevel << 16) + (grayLevel << 8) + grayLevel;
                    
                    img.setRGB(i, j, gray);
                }
            }
            ImageIO.write(img, "jpg", myFileProcessed);
        }
        catch(IOException ex)
        {
            
        }
        
        ImageIcon myImg = new ImageIcon(myFileProcessed.getPath());
            ImageIcon myImgScaled = 
                new ImageIcon(
                myImg.getImage()
                .getScaledInstance(
                        250, 250, Image.SCALE_DEFAULT));
            jLabel2.setIcon(myImgScaled);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        
        myFileProcessed = new File("temp.jpg");
        
        try{
            img = ImageIO.read(myFileOriginal);
            
            for(int i=0;i<img.getWidth();i++)
            {
                for(int j=0;j<img.getHeight();j++)
                {
                    int rgb = img.getRGB(i, j);
                    
                    int R = (rgb >> 16) & 0xFF;
                    //JOptionPane.showMessageDialog(null, R);
                    int G = (rgb >> 8) & 0xFF;
                    //JOptionPane.showMessageDialog(null, G);
                    int B = rgb & 0xFF;
                    //JOptionPane.showMessageDialog(null, B);
                    
                    //int grayLevel = (R+G+B)/3;
                    
                    int RGB = ((255-R) << 16) + ((255-G) << 8) + (255-B);
                    
                    img.setRGB(i, j, RGB);
                }
            }
            ImageIO.write(img, "jpg", myFileProcessed);
        }
        catch(IOException ex)
        {
            
        }
        
        ImageIcon myImg = new ImageIcon(myFileProcessed.getPath());
            ImageIcon myImgScaled = 
                new ImageIcon(
                myImg.getImage()
                .getScaledInstance(
                        250, 250, Image.SCALE_DEFAULT));
            jLabel2.setIcon(myImgScaled);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormImage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
